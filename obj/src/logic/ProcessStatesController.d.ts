import { ProcessStateV1, MessageV1 } from '../data/version1';
import { DataPage, FilterParams, PagingParams, IReferences, IOpenable, IConfigurable, ConfigParams, IReconfigurable, ICommandable, CommandSet } from 'pip-services3-commons-nodex';
import { IProcessStatesController } from './IProcessStatesController';
export declare class ProcessStatesController implements IProcessStatesController, IOpenable, IConfigurable, IReconfigurable, ICommandable {
    private _persistence;
    private _config;
    private _logger;
    private _counters;
    protected _opened: boolean;
    private _commandset;
    constructor();
    getCommandSet(): CommandSet;
    configure(config: ConfigParams): void;
    isOpen(): boolean;
    open(correlationId: string): Promise<void>;
    close(correlationId: string): Promise<void>;
    setReferences(references: IReferences): void;
    private _getProcess;
    private _getProcessById;
    private _getProcessByState;
    private _getActiveProcess;
    getProcesses(correlationId: string, filter: FilterParams, paging: PagingParams): Promise<DataPage<ProcessStateV1>>;
    getProcessById(correlationId: string, processId: string): Promise<ProcessStateV1>;
    startProcess(correlationId: string, processType: string, processKey: string, taskType: string, queueName: string, message: MessageV1, timeToLive?: number): Promise<ProcessStateV1>;
    activateOrStartProcess(correlationId: string, processType: string, processKey: string, taskType: string, queueName: string, message: MessageV1, timeToLive?: number): Promise<ProcessStateV1>;
    activateProcess(correlationId: string, processId: string, taskType: string, queueName: string, message: MessageV1): Promise<ProcessStateV1>;
    activateProcessByKey(correlationId: string, processType: string, processKey: string, taskType: string, queueName: string, message: MessageV1): Promise<ProcessStateV1>;
    continueProcess(correlationId: string, state: ProcessStateV1): Promise<void>;
    continueAndRecoverProcess(correlationId: string, state: ProcessStateV1, recoveryQueueName: string, recoveryMessage: MessageV1, recoveryTimeout: number): Promise<void>;
    repeatProcessRecovery(correlationId: string, state: ProcessStateV1, recoveryTimeout?: number): Promise<void>;
    rollbackProcess(correlationId: string, state: ProcessStateV1): Promise<void>;
    requestProcessForResponse(correlationId: string, state: ProcessStateV1, request: string, recoveryQueueName: string, recoveryMessage: MessageV1): Promise<ProcessStateV1>;
    failAndContinueProcess(correlationId: string, state: ProcessStateV1, errorMessage: string): Promise<void>;
    failAndRecoverProcess(correlationId: string, state: ProcessStateV1, errorMessage: string, recoveryQueueName: string, recoveryMessage: MessageV1, recoveryTimeout?: number): Promise<void>;
    failProcess(correlationId: string, state: ProcessStateV1, errorMessage: string): Promise<void>;
    resumeProcess(correlationId: string, state: ProcessStateV1, comment: string): Promise<ProcessStateV1>;
    abortProcess(correlationId: string, state: ProcessStateV1, comment: string): Promise<void>;
    completeProcess(correlationId: string, state: ProcessStateV1): Promise<void>;
    clearProcessRecovery(correlationId: string, state: ProcessStateV1): Promise<void>;
    updateProcess(correlationId: string, state: ProcessStateV1): Promise<ProcessStateV1>;
    deleteProcessById(correlationId: string, processId: string): Promise<ProcessStateV1>;
    suspendProcess(correlationId: string, state: ProcessStateV1, request: string, recoveryQueue: string, recoveryMessage: MessageV1, recoveryTimeout: number): Promise<void>;
    truncate(correlationId: string, timeout: number): Promise<void>;
}
